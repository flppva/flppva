1.1. Получение активных клиентов (покупка за последние 30 дней)
SELECT customer_id, customer_name, last_purchase_date
FROM customers
WHERE last_purchase_date >= CURRENT_DATE - INTERVAL '30 days';

-- 1.2. Товары, которые отсутствуют на складе
SELECT product_id, product_name
FROM products
WHERE stock_quantity = 0;


2. Агрегации и группировки
-- =============================================

2.1. Подсчёт продаж и среднего чека по категориям товаров
SELECT category, 
       COUNT(order_id) AS total_orders, 
       AVG(order_amount) AS average_order_value
FROM orders
GROUP BY category
ORDER BY total_orders DESC;

2.2. Ежемесячный анализ продаж
SELECT DATE_TRUNC('month', order_date) AS sales_month, 
       SUM(order_amount) AS total_sales
FROM orders
GROUP BY sales_month
ORDER BY sales_month;


3. Использование подзапросов


3.1. Список топ-5 продуктов по объёму продаж
SELECT product_id, 
       product_name, 
       SUM(quantity) AS total_quantity
FROM order_items
WHERE product_id IN (
    SELECT product_id
    FROM products
    WHERE category = 'Electronics'
)
GROUP BY product_id, product_name
ORDER BY total_quantity DESC
LIMIT 5;

4. Джоины и связи между таблицами
4.1. Полная информация о заказах и клиентах
SELECT o.order_id, 
       o.order_date, 
       o.total_amount, 
       c.customer_name, 
       c.customer_email
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
WHERE o.order_date BETWEEN '2024-01-01' AND '2024-12-31';

4.2. Продажи по регионам с учетом складов
SELECT r.region_name, 
       s.warehouse_name, 
       SUM(o.total_amount) AS region_sales
FROM orders o
JOIN warehouses s ON o.warehouse_id = s.warehouse_id
JOIN regions r ON s.region_id = r.region_id
GROUP BY r.region_name, s.warehouse_name
ORDER BY region_sales DESC;


5. Временные таблицы и оптимизация


5.1. Временная таблица для расчёта месячных продаж
WITH monthly_sales AS (
    SELECT DATE_TRUNC('month', order_date) AS sales_month, 
           SUM(order_amount) AS total_sales
    FROM orders
    GROUP BY sales_month
)
SELECT sales_month, 
       total_sales, 
       LAG(total_sales) OVER (ORDER BY sales_month) AS previous_month_sales,
       total_sales - COALESCE(LAG(total_sales) OVER (ORDER BY sales_month), 0) AS sales_difference
FROM monthly_sales;

5.2. Использование индексов для ускорения запросов
EXPLAIN ANALYZE
SELECT * 
FROM orders
WHERE order_date > CURRENT_DATE - INTERVAL '1 year';


6. Работа с датами и временными рядами

-- 6.1. Анализ ежедневных продаж
SELECT DATE(order_date) AS sales_day, 
       COUNT(order_id) AS total_orders, 
       SUM(order_amount) AS total_revenue
FROM orders
GROUP BY sales_day
ORDER BY sales_day;

-- 8.1. Ранжирование продуктов по продажам в рамках каждой категории
SELECT category, 
       product_name, 
       SUM(sales_amount) AS total_sales, 
       RANK() OVER (PARTITION BY category ORDER BY SUM(sales_amount) DESC) AS rank_in_category
FROM sales
GROUP BY category, product_name
ORDER BY category, rank_in_category;

-- 8.2. Скользящее среднее продаж за последние 7 дней
SELECT sales_date, 
       SUM(sales_amount) AS daily_sales, 
       AVG(SUM(sales_amount)) OVER (ORDER BY sales_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS moving_avg_7_days
FROM sales
GROUP BY sales_date
ORDER BY sales_date;

-- 9. Обработка строк и данных

-- 9.1. Извлечение домена из email клиентов
SELECT customer_id, 
       customer_email, 
       SUBSTRING(customer_email FROM POSITION('@' IN customer_email) + 1) AS email_domain
FROM customers;

-- 9.2. Объединение имени и фамилии клиентов в один столбец
SELECT customer_id, 
       CONCAT(first_name, ' ', last_name) AS full_name
FROM customers;

-- 10. Анализ временных рядов

-- 10.1. Ежедневный прирост продаж
WITH daily_sales AS (
    SELECT sales_date, 
           SUM(sales_amount) AS total_sales
    FROM sales
    GROUP BY sales_date
)
SELECT sales_date, 
       total_sales, 
       total_sales - LAG(total_sales) OVER (ORDER BY sales_date) AS daily_growth
FROM daily_sales;

-- 10.2. Анализ сезонности: общее количество продаж по месяцам за год
SELECT EXTRACT(MONTH FROM sales_date) AS sales_month, 
       SUM(sales_amount) AS total_sales
FROM sales
WHERE EXTRACT(YEAR FROM sales_date) = 2024
GROUP BY sales_month
ORDER BY sales_month;

-- 11. Использование временных таблиц

-- 11.1. Временная таблица для анализа повторных клиентов
WITH repeat_customers AS (
    SELECT customer_id, 
           COUNT(order_id) AS total_orders
    FROM orders
    GROUP BY customer_id
    HAVING COUNT(order_id) > 1
)
SELECT c.customer_id, 
       c.customer_name, 
       rc.total_orders
FROM customers c
JOIN repeat_customers rc ON c.customer_id = rc.customer_id;

-- 12. Многотабличные запросы и объединения

-- 12.1. Клиенты без заказов (анализ новых пользователей)
SELECT c.customer_id, 
       c.customer_name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.customer_id IS NULL;

-- 12.2. Анализ прибыльности заказов с учётом скидок
SELECT o.order_id, 
       o.order_date, 
       oi.product_id, 
       p.product_name, 
       oi.quantity, 
       oi.unit_price, 
       oi.unit_price * oi.quantity AS total_price, 
       (oi.unit_price * oi.quantity) * (1 - p.discount_rate) AS discounted_price
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id;

-- 13. Углубленная аналитика и подзапросы

-- 13.1. Топ-3 клиента по доходу для каждого региона
SELECT region_name, 
       customer_id, 
       customer_name, 
       SUM(order_total) AS total_revenue
FROM (
    SELECT r.region_name, 
           c.customer_id, 
           c.customer_name, 
           o.order_total, 
           RANK() OVER (PARTITION BY r.region_name ORDER BY o.order_total DESC) AS rank_in_region
    FROM regions r
    JOIN warehouses w ON r.region_id = w.region_id
    JOIN orders o ON w.warehouse_id = o.warehouse_id
    JOIN customers c ON c.customer_id = o.customer_id
) ranked_customers
WHERE rank_in_region <= 3
GROUP BY region_name, customer_id, customer_name
ORDER BY region_name, total_revenue DESC;
